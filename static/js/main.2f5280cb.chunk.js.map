{"version":3,"sources":["serviceWorker.js","utils/index.js","state/networks/reducers.js","state/networks/actions.js","state/networks/selectors.js","state/networks/index.js","state/networks/logic.js","state/selections/reducers.js","state/selections/index.js","state/selections/logic.js","utils/firebaseinit.js","state/store.js","state/constants/index.js","components/Point.js","components/MapInset.js","components/MapView.js","containers/DefaultLayout.js","index.js"],"names":["Boolean","window","location","hostname","match","makeConstant","branchOfState","actionType","REQUEST_NETWORKS","SET_NETWORKS","REQUEST_FAILED","initialState","allNetworks","eventReducer","state","type","payload","error","console","log","requestNetworks","getAllNetworks","networks","actions","logics","createLogic","processOptions","successType","failType","process","deps","firestore","collection","get","then","snapshot","docs","map","doc","data","reducers","selectors","searchLatLng","category","language","community","action","PREFIX","config","apiKey","authDomain","databaseURL","storageBucket","messagingSenderId","projectId","firebase","initializeApp","firebasedb","database","selections","reduxLogicDependencies","firebaseUrl","httpClient","request","logicMiddleware","createLogicMiddleware","middleware","applyMiddleware","Point","network","this","geometry","coordinates","Number","lng","lat","properties","region","contact","socials","social","title","form","bbox","mapboxgl","MapInset","props","addClickListener","bind","addLayer","createFeatures","updateData","handleReset","featuresHome","initializeMap","nextProps","length","layer","getSource","setData","features","stateName","setUsState","on","usState","id","LAYER_NAME","paint","source","removeHighlights","bounds","mapId","accessToken","Map","container","doubleClickZoom","dragPan","scrollZoom","style","fitBounds","easeTo","duration","linear","selectedState","mapClassNames","classNames","hidden","inset","Fragment","className","data-bounds","React","Component","defaultProps","MapView","filterDistrict","includedStates","addPopups","focusMap","filterForStateInsets","insetOnClickEvent","alaskanetworks","filter","hawaiinetworks","popoverColor","setState","e","dataBounds","target","parentNode","getAttribute","split","boundsOne","boundsTwo","concat","bb","height","innerHeight","width","innerWidth","view","geoViewport","viewport","zoom","flyTo","popup","Popup","closeButton","closeOnClick","queryRenderedFeatures","point","layers","getCanvas","cursor","feature","link","setLngLat","setHTML","addTo","JSON","parse","document","querySelector","remove","usaButton","createElement","innerHTML","addEventListener","appendChild","addControl","NavigationControl","disable","dragRotate","touchZoomRotate","disableRotation","makeZoomToNationalButton","center","resetSelections","searchByDistrict","setLatLng","distance","district","NaN","filterByValue","refcode","DefaultLayout","connect","networkStateBranch","dispatch","Store","createStore","combineReducers","App","store","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2f5280cb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const makeConstant = (branchOfState, actionType) => `${branchOfState}-${actionType}`;\n\n","import {\n  makeConstant\n} from \"../../utils\";\nconst STATE_BRANCH = 'EVENTS';\n\nexport const REQUEST_NETWORKS = makeConstant(STATE_BRANCH, \"REQUEST_NETWORKS\");\nexport const SET_NETWORKS = makeConstant(STATE_BRANCH, \"SET_NETWORKS\");\nexport const REQUEST_FAILED = makeConstant(STATE_BRANCH, \"REQUEST_FAILED\");\nconst initialState = {\n  allNetworks: [],\n};\n\n\nconst eventReducer = (state = initialState, { type, payload }) => {\n  switch (type) {\n    case SET_NETWORKS:\n      return {\n        ...state,\n        allNetworks: payload,\n        error: null\n      };\n    case REQUEST_FAILED:\n      console.log(`REQUEST_FAILED: ${payload}`);\n      return {\n        ...state,\n        error: payload\n      };\n     default:\n      return state;\n  }\n};\n\nexport default eventReducer;","import {\n  REQUEST_NETWORKS,\n} from './reducers';\n\n\nexport const requestNetworks = () => ({\n  type: REQUEST_NETWORKS,\n});\n\n","import { createSelector } from 'reselect';\n\nexport const getAllNetworks = state => state.networks.allNetworks;\n","import * as actions from \"./actions\";\nimport reducers from \"./reducers\";\nimport * as selectors from \"./selectors\";\nimport logics from \"./logic\";\n\nexport default {\n    actions,\n    logics,\n    reducers,\n    selectors,\n};","import { createLogic } from \"redux-logic\";\n\nimport { REQUEST_NETWORKS, SET_NETWORKS, REQUEST_FAILED } from \"./reducers\";\n\nconst fetchNetworks = createLogic({\n  type: REQUEST_NETWORKS,\n  processOptions: {\n    successType: SET_NETWORKS,\n    failType: REQUEST_FAILED,\n  },\n  process(deps) {\n      const {\n        firestore,\n    } = deps;\n        return firestore.collection('mutual_aid_networks').get()\n          .then((snapshot) => {\n              const allNetworks = snapshot.docs.map(doc => doc.data());\n              return allNetworks;\n          })\n        }\n  })\n\n\nexport default [\n  fetchNetworks,\n];"," import {\n   makeConstant\n } from \"../../utils\";\n const STATE_BRANCH = 'SELECTIONS';\n\nconst initialState = {\n  searchLatLng: '',\n  category: 'General',\n  language: '',\n  community: ''\n};\n\nconst selectionReducer = (state = initialState, action) => {\n  switch (action.type) {\n\n    default:\n      return state;\n  }\n};\n\nexport default selectionReducer;","import * as actions from \"./actions\";\nimport reducers from \"./reducers\";\nimport * as selectors from \"./selectors\";\nimport logics from \"./logic\";\n\nexport default {\n    actions,\n    logics,\n    reducers,\n    selectors,\n};","import { createLogic } from \"redux-logic\"\n\n\nexport default [];","// FIREBASE METHODS\n// Initialize Firebase\nimport firebase from 'firebase';\n\nconst PREFIX = process.env.NODE_ENV === \"production\" ? \"REACT_APP_PROD\" : \"REACT_APP_TESTING\";\nif (process.env.NODE_ENV !== \"production\") {\n  console.log(process.env[`${PREFIX}_PROJECT_ID`]);\n}\n\nconst config = {\n  apiKey: process.env[`${PREFIX}_FIREBASE_API_KEY`],\n  authDomain: process.env[`${PREFIX}_FIREBASE_AUTH_DOMAIN`],\n  databaseURL: process.env[`${PREFIX}_DATABASE_URL`],\n  storageBucket: process.env[`${PREFIX}_STORAGE_BUCKET`],\n  messagingSenderId: process.env[`${PREFIX}_MESSAGING_SENDER_ID`],\n  projectId: process.env[`${PREFIX}_PROJECT_ID`],\n};\n\nfirebase.initializeApp(config);\nexport const firebasedb = firebase.database();\nexport const firestore = firebase.firestore();\n\nexport default firebase;","import { applyMiddleware, createStore, combineReducers } from 'redux';\nimport { createLogicMiddleware } from 'redux-logic';\nimport request from 'superagent';\n\nimport networks from './networks';\nimport selections from './selections';\n\n\nimport { firebaseUrl } from '../state/constants';\nimport {\n  firebasedb,\n  firestore,\n} from '../utils/firebaseinit';\n\nconst reducers = {\n  networks: networks.reducers,\n  selections: selections.reducers,\n};\n\nconst logics = [\n  ...networks.logics,\n  ...selections.logics,\n];\n\nconst reduxLogicDependencies = {\n  firebaseUrl: firebaseUrl,\n  firebasedb,\n  firestore,\n  httpClient: request,\n};\n\nconst logicMiddleware = createLogicMiddleware(logics, reduxLogicDependencies);\n\nlet middleware = applyMiddleware(\n  logicMiddleware\n);\n\nif (process.env.NODE_ENV === `development` && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) {\n  middleware = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(middleware);\n}\n\nexport default () => {\n  const store = createStore(\n    combineReducers(reducers),\n    middleware\n  );\n\n  return store;\n};","export const firebaseUrl = process.env.NODE_ENV === \"production\" ? process.env.REACT_APP_PROD_DATABASE_URL : process.env.REACT_APP_TESTING_DATABASE_URL;\n","class Point {\n    constructor(network) {\n        this.type = 'Feature';\n        this.geometry = {\n            coordinates: [Number(network.lng), Number(network.lat)],\n            type: 'Point',\n        };\n        this.properties = {\n            region: network.region,\n            contact: network.contact || null,\n            socials: network.social || null,\n            state: network.state,\n            title: network.title,\n            form: network.form,\n            category: network.category || 'General',\n            bbox: network.bbox,\n        };\n    }\n}\n\nexport default Point;\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport Point from './Point';\nimport LAYER_NAME from './MapView';\n\nconst mapboxgl = window.mapboxgl;\n\nclass MapInset extends React.Component {\n  constructor(props) {\n    super(props);\n    this.addClickListener = this.addClickListener.bind(this);\n    this.addLayer = this.addLayer.bind(this);\n    this.createFeatures = this.createFeatures.bind(this);\n    this.updateData = this.updateData.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n  }\n\n  componentDidMount() {\n    const { networks } = this.props;\n    const featuresHome = this.createFeatures(networks);\n    this.initializeMap(featuresHome);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const {\n      networks,\n      type,\n    } = nextProps;\n\n    if (networks.length !== this.props.networks.length) {\n      // this.updateData(networks, LAYER_NAME);\n    }\n  }\n\n  updateData(networks, layer) {\n    const featuresHome = this.createFeatures(networks);\n    if (!this.map.getSource(layer)) {\n      return;\n    }\n    this.map.getSource(layer).setData(featuresHome);\n  }\n\n  createFeatures(networks) {\n    const featuresHome = {\n      features: [],\n      type: 'FeatureCollection',\n    };\n\n    featuresHome.features = networks.map((network) => {\n\n      const newFeature = new Point(network);\n      return newFeature;\n    });\n    return featuresHome;\n  }\n\n  addClickListener() {\n    const {\n      stateName,\n      setUsState,\n    } = this.props;\n    const { map } = this;\n\n    map.on('click', () => {\n      setUsState({ usState: stateName });\n    });\n  }\n\n  addLayer(featuresHome) {\n    this.map.addLayer(\n      {\n        id: LAYER_NAME,\n        paint: {\n          'circle-color': '#11b4da',\n          'circle-opacity': 0.5,\n          'circle-radius': 4,\n          'circle-stroke-color': '#fff',\n          'circle-stroke-width': 1,\n        },\n        source: {\n          data: featuresHome,\n          type: 'geojson',\n        },\n        type: 'circle',\n      },\n      'district_interactive',\n    );\n  }\n\n\n  handleReset() {\n    this.removeHighlights();\n    // this.props.resetSelections();\n  }\n\n\n  initializeMap(featuresHome) {\n    const {\n      bounds,\n      mapId,\n    } = this.props;\n\n    mapboxgl.accessToken =\n        'pk.eyJ1IjoidG93bmhhbGxwcm9qZWN0IiwiYSI6ImNqMnRwOG4wOTAwMnMycG1yMGZudHFxbWsifQ.FXyPo3-AD46IuWjjsGPJ3Q';\n    const styleUrl = 'mapbox://styles/townhallproject/cjgr7qoqr00012ro4hnwlvsyp';\n\n    this.map = new mapboxgl.Map({\n      container: mapId,\n      doubleClickZoom: false,\n      dragPan: false,\n      scrollZoom: false,\n      style: styleUrl,\n    });\n\n    this.map.fitBounds(bounds, {\n      easeTo: { duration: 0 },\n      linear: true,\n    });\n    // map on 'load'\n    this.map.on('load', () => {\n      this.addClickListener();\n      this.addLayer(featuresHome);\n\n    });\n  }\n\n  render() {\n    const {\n      selectedState,\n      mapId,\n    } = this.props;\n    const mapClassNames = classNames({\n      hidden: selectedState,\n      inset: true,\n    });\n    return (\n      <React.Fragment>\n        <div id={mapId} className={mapClassNames} data-bounds={this.props.bounds} />\n      </React.Fragment>\n    );\n  }\n}\n\nMapInset.propTypes = {\n  bounds: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)).isRequired,\n  colorMap: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  networks: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  mapId: PropTypes.string.isRequired,\n  resetSelections: PropTypes.func.isRequired,\n  selectedState: PropTypes.string,\n  setUsState: PropTypes.func.isRequired,\n  stateName: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n};\n\nMapInset.defaultProps = {\n  selectedState: '',\n};\n\nexport default MapInset;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { find, filter } from 'lodash';\nimport geoViewport from '@mapbox/geo-viewport';\nimport Point from './Point';\nimport states from '../data/states';\n\nimport MapInset from './MapInset';\nimport './style.scss';\nimport './popover.scss';\n\nexport const LAYER_NAME = 'networks-dots'\nconst mapboxgl = window.mapboxgl;\nclass MapView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.filterDistrict = ['any'];\n    this.includedStates = ['in', 'NAME'];\n\n    this.addPopups = this.addPopups.bind(this);\n    this.addClickListener = this.addClickListener.bind(this);\n    this.addLayer = this.addLayer.bind(this);\n    this.createFeatures = this.createFeatures.bind(this);\n    this.updateData = this.updateData.bind(this);\n    this.focusMap = this.focusMap.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n    this.filterForStateInsets = this.filterForStateInsets.bind(this);\n    this.insetOnClickEvent = this.insetOnClickEvent.bind(this);\n    this.state = {\n      alaskanetworks: filter(this.props.networks, { state: 'AK' }),\n      hawaiinetworks: filter(this.props.networks, { state: 'HI' }),\n      popoverColor: 'popover-general-icon',\n    };\n  }\n\n  componentDidMount() {\n    const { networks } = this.props;\n    const featuresHome = this.createFeatures(networks);\n\n    this.initializeMap(featuresHome);\n  }\n\n  componentDidUpdate(nextProps) {\n    const {\n      selectedState,\n    } = nextProps;\n    \n    if (selectedState) {\n      return this.focusMap();\n    }\n    return this.map.fitBounds([[-128.8, 23.6], [-65.4, 50.2]]);\n  }\n\n  filterForStateInsets(networks) {\n    const alaskanetworks = filter(networks, { state: 'AK' });\n    const hawaiinetworks = filter(networks, { state: 'HI' });\n    this.setState({\n      alaskanetworks,\n      hawaiinetworks,\n    });\n  }\n\n  insetOnClickEvent(e) {\n    this.setState({ inset: false });\n    const dataBounds = e.target.parentNode.parentNode.getAttribute('data-bounds').split(',');\n    const boundsOne = [Number(dataBounds[0]), Number(dataBounds[1])];\n    const boundsTwo = [Number(dataBounds[2]), Number(dataBounds[3])];\n    const bounds = boundsOne.concat(boundsTwo);\n    this.map.fitBounds(bounds);\n  }\n\n  focusMap(bb) {\n    if (!bb) {\n      return;\n    }\n    const height = window.innerHeight;\n    const width = window.innerWidth;\n    const view = geoViewport.viewport(bb, [width / 2, height / 2]);\n    if (view.zoom < 2.5) {\n      view.zoom = 2.5;\n    } else {\n      view.zoom -= 0.5;\n    }\n    this.map.flyTo(view);\n  }\n\n  updateData(networks, layer) {\n    const featuresHome = this.createFeatures(networks);\n    this.map.fitBounds([[-128.8, 23.6], [-65.4, 50.2]]);\n    if (!this.map.getSource(layer)) {\n      return;\n    }\n    this.map.getSource(layer).setData(featuresHome);\n  }\n\n  createFeatures(networks) {\n    const featuresHome = {\n      features: [],\n      type: 'FeatureCollection',\n    };\n    featuresHome.features = networks.map((network) => {\n      const newFeature = new Point(network);\n      return newFeature;\n    });\n    return featuresHome;\n  }\n\n  addPopups(layer) {\n    const { map } = this;\n\n    const popup = new mapboxgl.Popup({\n      closeButton: true,\n      closeOnClick: true,\n    });\n\n    map.on('mousemove', (e) => {\n      const features = map.queryRenderedFeatures(e.point, { layers: [layer] });\n      // Change the cursor style as a UI indicator.\n      map.getCanvas().style.cursor = (features.length) ? 'pointer' : '';\n\n      if (features.length) {\n        const feature = features[0];\n        const { properties } = feature;\n\n        this.setState({\n          popoverColor: `popover-${feature.properties.category}`\n        });\n        const link = properties.form ? `<a href=${properties.form}>Link to form</a>` : `<a href=${properties.socials}>Link to group</a>`;\n        return popup.setLngLat(feature.geometry.coordinates)\n          .setHTML(`\n            <h4>${properties.title}</h4>\n            <div>${link}</div>`)\n \n          .addTo(map);\n      }\n      return undefined;\n    });\n  }\n\n  addClickListener() {\n\n    const { map } = this;\n\n    map.on('click', (e) => {\n      const features = map.queryRenderedFeatures(\n        e.point,\n        {\n          layers: [LAYER_NAME],\n        },\n      );\n\n      if (features.length > 0) {\n        let bbox = JSON.parse(features[0].properties.bbox);\n        console.log(bbox)\n        map.fitBounds(bbox)\n      }\n    });\n  }\n\n  addLayer(featuresHome) {\n    this.map.addLayer(\n      {\n        id: LAYER_NAME,\n        paint: {\n          'circle-color': '#11b4da',\n          'circle-opacity': 0.5,\n          'circle-radius': 4,\n          'circle-stroke-color': '#fff',\n          'circle-stroke-width': 1,\n        },\n        source: {\n          data: featuresHome,\n          type: 'geojson',\n        },\n        type: 'circle',\n      },\n      'district_interactive',\n    );\n  }\n\n\n  handleReset() {\n    // this.props.resetSelections();\n    this.setState({ inset: true });\n  }\n  // Creates the button in our zoom controls to go to the national view\n  makeZoomToNationalButton() {\n    document.querySelector('.mapboxgl-ctrl-compass').remove();\n    if (document.querySelector('.mapboxgl-ctrl-usa')) {\n      document.querySelector('.mapboxgl-ctrl-usa').remove();\n    }\n    const usaButton = document.createElement('button');\n    usaButton.className = 'mapboxgl-ctrl-icon mapboxgl-ctrl-usa';\n    usaButton.innerHTML = '<span class=\"usa-icon\"></span>';\n\n    usaButton.addEventListener('click', this.handleReset);\n    document.querySelector('.mapboxgl-ctrl-group').appendChild(usaButton);\n  }\n\n  initializeMap(featuresHome) {\n\n    mapboxgl.accessToken =\n      'pk.eyJ1IjoidG93bmhhbGxwcm9qZWN0IiwiYSI6ImNqMnRwOG4wOTAwMnMycG1yMGZudHFxbWsifQ.FXyPo3-AD46IuWjjsGPJ3Q';\n    const styleUrl = 'mapbox://styles/townhallproject/cjgr7qoqr00012ro4hnwlvsyp';\n\n    this.map = new mapboxgl.Map({\n      container: 'map',\n      style: styleUrl,\n    });\n\n    // Set Mapbox map controls\n    this.map.addControl(new mapboxgl.NavigationControl());\n    this.map.scrollZoom.disable();\n    this.map.dragRotate.disable();\n    this.map.touchZoomRotate.disableRotation();\n    this.makeZoomToNationalButton();\n    // map on 'load'\n    this.map.on('load', () => {\n      this.map.fitBounds([[-128.8, 23.6], [-65.4, 50.2]]);\n      this.addClickListener();\n      this.addLayer(featuresHome);\n      this.addPopups(LAYER_NAME);\n      // this.map.getSource(LAYER_NAME).setData(featuresHome);\n    });\n  }\n\n  render() {\n    const {\n      center,\n      selectedState,\n      resetSelections,\n      searchByDistrict,\n      setLatLng,\n      setUsState,\n    } = this.props;\n\n    return (\n      <React.Fragment>\n        <div id=\"map\" className={this.state.popoverColor}>\n          <div className=\"map-overlay\" id=\"legend\">\n            <MapInset\n              networks={this.state.alaskanetworks}\n              center={center}\n              stateName=\"AK\"\n              selectedState={selectedState}\n              resetSelections={resetSelections}\n              setLatLng={setLatLng}\n              setUsState={setUsState}\n              mapId=\"map-overlay-alaska\"\n              bounds={[[-170.15625, 51.72702815704774], [-127.61718749999999, 71.85622888185527]]}\n            />\n            <MapInset\n              networks={this.state.hawaiinetworks}\n              stateName=\"HI\"\n              center={center}\n              selectedState={selectedState}\n              resetSelections={resetSelections}\n              searchByDistrict={searchByDistrict}\n              setLatLng={setLatLng}\n              setUsState={setUsState}\n              mapId=\"map-overlay-hawaii\"\n              bounds={[\n                [-161.03759765625, 18.542116654448996],\n                [-154.22607421875, 22.573438264572406]]}\n            />\n          </div>\n        </div>\n\n      </React.Fragment>\n    );\n  }\n}\n\nMapView.propTypes = {\n  center: PropTypes.shape({ LAT: PropTypes.string, LNG: PropTypes.string, ZIP: PropTypes.string }),\n  colorMap: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  distance: PropTypes.number,\n  district: PropTypes.number,\n  filterByValue: PropTypes.shape({}),\n  networks: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  refcode: PropTypes.string,\n  resetSelections: PropTypes.func.isRequired,\n  searchByDistrict: PropTypes.func.isRequired,\n  setUsState: PropTypes.func.isRequired,\n  setLatLng: PropTypes.func.isRequired,\n};\n\nMapView.defaultProps = {\n  center: {},\n  distance: 50,\n  district: NaN,\n  filterByValue: {},\n  refcode: '',\n};\n\nexport default MapView;\n","import React from 'react';\nimport {\n  connect\n} from 'react-redux';\n\nimport networkStateBranch from '../state/networks';\nimport selectionStateBranch from '../state/selections';\nimport MapView from '../components/MapView';\n\nclass DefaultLayout extends React.Component {\n  componentDidMount() {\n    const {\n      requestNetworks\n    } = this.props;\n    requestNetworks();\n  }\n  render() {\n    const {\n      allNetworks\n    } = this.props;\n    if (!allNetworks.length) {\n      return null;\n    }\n    return (\n      <div className=\"main-container\">\n        <MapView \n          networks={allNetworks}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  allNetworks: networkStateBranch.selectors.getAllNetworks(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  requestNetworks: () => dispatch(networkStateBranch.actions.requestNetworks()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DefaultLayout);\n","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport configureStore from './state/store';\n// Containers\nimport DefaultLayout from './containers/DefaultLayout';\nimport './index.css';\n\n// Bootstrap the store\nvar Store = configureStore();\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={Store}>\n        <DefaultLayout />\n      </Provider>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}