{"version":3,"sources":["serviceWorker.js","utils/index.js","state/networks/reducers.js","state/networks/actions.js","state/selections/selectors.js","state/networks/selectors.js","state/networks/index.js","state/networks/logic.js","state/selections/reducers.js","state/constants/index.js","state/selections/actions.js","state/selections/index.js","state/selections/logic.js","state/store.js","components/Map/constants.js","components/Map/MapInset.js","components/Map/index.jsx","components/SubmitNetwork/index.jsx","components/Filters/index.jsx","components/NetworkCard/index.js","components/ListView/index.js","components/NoWebGl/index.jsx","containers/DefaultLayout.js","index.js"],"names":["Boolean","window","location","hostname","match","makeConstant","branchOfState","actionType","REQUEST_NETWORKS","SET_NETWORKS","REQUEST_FAILED","SET_PAGE_OF_NETWORKS","initialState","allNetworks","eventReducer","state","type","payload","error","console","log","requestNetworks","setPageOfNetworks","getSelectedCategories","selections","categories","getSearchLocation","searchLocation","getHoveredPointId","hoveredPointId","getUsState","usState","getViewState","createSelector","lat","mapboxgl","getAllNetworks","networks","getFilteredNetworks","length","filter","network","includes","category","getNetworksInArea","lookup","LatLng","Number","lng","city","computeDistanceBetween","sort","a","b","getVisibleCards","getBoundingBox","cards","reduce","acc","cur","index","extend","LngLatBounds","bbox","actions","logics","createLogic","process","deps","dispatch","done","httpClient","firebaseUrl","requestPage","url","get","then","snapshot","pageOfNetworks","body","documents","map","doc","data","fields","mapValues","object","newValues","values","integerValue","obj","processOnePage","nextPageToken","reducers","selectors","SET_CATEGORY_FILTERS","SET_LAT_LNG","SET_HOVERED_POINT","SET_US_STATE","RESET_TO_DEFAULTS","options","view","language","community","setCategoryFilters","setLatLng","setHoveredPoint","setUsState","resetToDefaultView","action","center","reduxLogicDependencies","request","logicMiddleware","createLogicMiddleware","middleware","applyMiddleware","LAYER_NAME","accessToken","mapboxStyle","MapInset","props","addClickListener","bind","this","initializeMap","selectedCategories","getLayer","filterArray","setFilter","prevProps","isEqual","setFilters","bounds","setBounds","on","stateName","mapId","Map","container","doubleClickZoom","dragPan","scrollZoom","style","fitBounds","easeTo","duration","linear","viewState","mapClassNames","classNames","hidden","inset","Fragment","id","className","data-bounds","React","Component","defaultProps","selectedState","MapView","filterDistrict","includedStates","addPopups","handleReset","insetOnClickEvent","handleClickOnInset","popoverColor","resize","hoveredPopup","remove","setInitialState","setState","hoverPoint","unHoverPoint","e","dataBounds","target","parentNode","getAttribute","split","boundsOne","boundsTwo","concat","padding","top","bottom","left","right","maxZoom","layer","Popup","closeButton","closeOnClick","features","queryRenderedFeatures","point","layers","getCanvas","cursor","link","feature","properties","popoverClassName","join","toLowerCase","generalForm","supportOfferForm","supportRequestForm","facebookPage","setLngLat","geometry","coordinates","setHTML","title","addTo","hoveredPinId","setFeatureState","source","sourceLayer","hover","document","getElementsByClassName","Array","from","forEach","ele","value","querySelector","usaButton","createElement","innerHTML","addEventListener","appendChild","addControl","NavigationControl","disable","dragRotate","touchZoomRotate","disableRotation","makeZoomToNationalButton","MapboxGeocoder","countries","marker","zoom","flyTo","result","returned","place_type","setPaintProperty","resetSelections","SubmitNetwork","href","CheckboxGroup","Group","Filters","indeterminate","checkAll","onChange","checkedList","onCheckAllChange","checked","visible","absolute","key","replace","NetworkCard","address","neighborhood","onMouseEnter","onMouseLeave","extra","justify","rel","Title","NoNetworkSection","level","InfoCircleOutlined","ListView","visibleCards","class","Header","Content","Footer","DefaultLayout","filteredNetworks","masterBbox","theme","mode","lineHeight","supported","NoWebGl","textAlign","connect","networkStateBranch","selectionStateBranch","Store","createStore","combineReducers","App","store","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.87457460.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const makeConstant = (branchOfState, actionType) => `${branchOfState}-${actionType}`;\n\n","import {\n  makeConstant\n} from \"../../utils\";\nconst STATE_BRANCH = 'EVENTS';\n\nexport const REQUEST_NETWORKS = makeConstant(STATE_BRANCH, \"REQUEST_NETWORKS\");\nexport const SET_NETWORKS = makeConstant(STATE_BRANCH, \"SET_NETWORKS\");\nexport const REQUEST_FAILED = makeConstant(STATE_BRANCH, \"REQUEST_FAILED\");\nexport const SET_PAGE_OF_NETWORKS = makeConstant(STATE_BRANCH, \"SET_PAGE_OF_NETWORKS\");\n\nconst initialState = {\n  allNetworks: [],\n};\n\n\nconst eventReducer = (state = initialState, { type, payload }) => {\n  switch (type) {\n    case SET_NETWORKS:\n      return {\n        ...state,\n        allNetworks: payload,\n        error: null\n      };\n    case SET_PAGE_OF_NETWORKS:\n      return {\n        ...state,\n        allNetworks: [...state.allNetworks, ...payload],\n        error: null\n      };\n    case REQUEST_FAILED:\n      console.log(`REQUEST_FAILED: ${payload}`);\n      return {\n        ...state,\n        error: payload\n      };\n     default:\n      return state;\n  }\n};\n\nexport default eventReducer;","import {\n  REQUEST_NETWORKS, SET_PAGE_OF_NETWORKS,\n} from './reducers';\n\n\nexport const requestNetworks = () => ({\n  type: REQUEST_NETWORKS,\n});\n\nexport const setPageOfNetworks = (payload) => ({\n  type: SET_PAGE_OF_NETWORKS,\n  payload\n})","import { createSelector } from 'reselect';\n\nexport const getSelectedCategories = (state) => state.selections.categories;\n// export const getViewState = state => state.selections.view;\nexport const getSearchLocation = state => state.selections.searchLocation;\nexport const getHoveredPointId = state => state.selections.hoveredPointId;\nexport const getUsState = state => state.selections.usState;\n\nexport const getViewState = createSelector([getSearchLocation, getUsState], (searchLocation, usState) => {\n    if (searchLocation.lat || usState) {\n        return 'list';\n    }\n    return 'default';\n})","import { createSelector } from 'reselect';\nimport { filter } from 'lodash';\nimport {\n    computeDistanceBetween,\n    LatLng\n} from 'spherical-geometry-js';\n\nimport { getSelectedCategories, getSearchLocation, getUsState } from '../selections/selectors';\nconst mapboxgl = window.mapboxgl;\n\nexport const getAllNetworks = state => state.networks.allNetworks;\n\nexport const getFilteredNetworks = createSelector([getAllNetworks, getSelectedCategories], (networks, categories) => {\n    if (!categories.length) {\n        return [];\n    }\n    return filter(networks, (network) => {\n        return categories.includes(network.category)\n    })\n})\n\n\nexport const getNetworksInArea = createSelector([getAllNetworks, getSearchLocation, getUsState], (allNetworks, location, usState) => {\n            if (!location.lat && !usState) {\n                return [];\n            }\n            // statewide search\n            if (!location.lat) {\n                return allNetworks.filter((network) => network.state && network.state === usState);\n                \n            }\n            const lookup = new LatLng(Number(location.lat), Number(location.lng));\n            const maxMeters = 50 * 1609.34; // Convert miles to meters before filtering\n            return allNetworks.filter((network) => {\n                // include statewide networks\n                if (network.state && !network.city && network.state === usState) {\n                    return true;\n                } \n\n                const curDistance = computeDistanceBetween(\n                    lookup,\n                    new LatLng(Number(network.lat), Number(network.lng)),\n                );\n                return curDistance < maxMeters;\n                \n            }).sort((a, b) => {\n                const aDistance = computeDistanceBetween(\n                    lookup,\n                    new LatLng(Number(a.lat), Number(a.lng)),\n                );\n                const bDistance = computeDistanceBetween(\n                    lookup,\n                    new LatLng(Number(b.lat), Number(b.lng)),\n                );\n                return aDistance - bDistance;\n            });\n    \n})\n\nexport const getVisibleCards = createSelector([getNetworksInArea, getSelectedCategories], (networks, categories) => {\n    if (!categories.length) {\n        return [];\n    }\n    return filter(networks, (network) => {\n        return categories.includes(network.category)\n    })\n})\n\nexport const getBoundingBox = createSelector([getNetworksInArea], (cards) => {\n    if (!cards.length) {\n        return null;\n    }\n    return cards.reduce((acc, cur, index) => {\n        if (index > 0) {\n            acc = acc.extend(new mapboxgl.LngLatBounds(cur.bbox));\n        }\n        return acc;\n    }, new mapboxgl.LngLatBounds(cards[0].bbox));\n})","import * as actions from \"./actions\";\nimport reducers from \"./reducers\";\nimport * as selectors from \"./selectors\";\nimport logics from \"./logic\";\n\nexport default {\n    actions,\n    logics,\n    reducers,\n    selectors,\n};","import {\n  createLogic\n} from \"redux-logic\";\nimport {\n  mapValues,\n  values,\n  map,\n} from 'lodash';\nimport {\n  REQUEST_NETWORKS,\n} from \"./reducers\";\n\nimport {\n  setPageOfNetworks\n} from \"./actions\";\n\nconst fetchNetworks = createLogic({\n  type: REQUEST_NETWORKS,\n\n  process(deps, dispatch, done) {\n    const {\n      httpClient,\n      firebaseUrl,\n    } = deps;\n    const processOnePage = (snapshot) => {\n      return snapshot.body.documents.map((doc) => {\n        const data = doc.fields;\n        const unpackedData = mapValues(data, (object) => {\n          let newValues = values(object)[0];\n          if (object.integerValue) {\n            newValues = Number(newValues);\n          }\n          if (newValues.values) {\n            newValues = map(newValues.values, obj => {\n              return values(obj)[0];\n            });\n          }\n          return newValues;\n        })\n        return unpackedData;\n      });\n    }\n\n    const requestPage = (url) => {\n      return httpClient.get(url)\n        .then((snapshot) => {\n          const pageOfNetworks = processOnePage(snapshot)\n          dispatch(setPageOfNetworks(pageOfNetworks))\n          if (snapshot.body.nextPageToken) {\n            const url = `${firebaseUrl}/?pageToken=${snapshot.body.nextPageToken}`\n            return requestPage(url)\n          }\n          done();\n        })\n    }\n    requestPage(firebaseUrl);\n  }\n})\n\n\nexport default [\n  fetchNetworks,\n];","import {\n  makeConstant\n} from \"../../utils\";\nimport { GENERAL, REQUEST_SUPPORT, OFFER_SUPPORT, INFORMATION } from \"../constants\";\n\nconst STATE_BRANCH = 'SELECTIONS';\nexport const SET_CATEGORY_FILTERS = makeConstant(STATE_BRANCH, 'FILTER_BY_CATEGORY');\nexport const SET_LAT_LNG = makeConstant(STATE_BRANCH, 'SET_LAT_LNG');\nexport const SET_HOVERED_POINT = makeConstant(STATE_BRANCH, 'SET_HOVERED_POINT');\nexport const SET_US_STATE = makeConstant(STATE_BRANCH, \"SET_US_STATE\");\nexport const RESET_TO_DEFAULTS = makeConstant(STATE_BRANCH, \"RESET_TO_DEFAULTS\");\n\nexport const options = [GENERAL, REQUEST_SUPPORT, OFFER_SUPPORT, INFORMATION];\n\nconst initialState = {\n  view: 'default',\n  categories: options,\n  language: '',\n  community: '',\n  searchLocation: {},\n  hoveredPointId: null,\n  usState: '',\n};\n\nconst selectionReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_CATEGORY_FILTERS:\n      return {\n        ...state,\n        categories: action.payload,\n      }\n      case SET_LAT_LNG:\n        return {\n          ...state,\n          searchLocation: action.payload.center,\n          usState: action.payload.usState,\n        }\n      case RESET_TO_DEFAULTS:\n        return {\n          ...state,\n          searchLocation: {},\n          usState: ''\n        }\n      case SET_HOVERED_POINT: \n        return {\n          ...state,\n          hoveredPointId: action.payload,\n        }\n        default:\n          return state;\n  }\n};\n\nexport default selectionReducer;","// export const firebaseUrl = process.env.NODE_ENV === \"production\" ? process.env.REACT_APP_PROD_FIRESTORE_URL : process.env.REACT_APP_TESTING_FIRESTORE_URL;\nexport const GENERAL = 'General';\nexport const OFFER_SUPPORT = 'Offer Support';\nexport const REQUEST_SUPPORT = 'Request Support';\nexport const INFORMATION = 'Community';\nexport const firebaseUrl = \"https://firestore.googleapis.com/v1/projects/townhallproject-86312/databases/(default)/documents/mutual_aid_networks\"","import {\n    SET_CATEGORY_FILTERS,\n    SET_LAT_LNG,\n    SET_HOVERED_POINT,\n    SET_US_STATE,\n    RESET_TO_DEFAULTS\n} from \"./reducers\";\n\nexport const setCategoryFilters = (payload) => ({\n    type: SET_CATEGORY_FILTERS,\n    payload\n});\n\nexport const setLatLng = (payload) => ({\n    type: SET_LAT_LNG,\n    payload,\n});\n\nexport const setHoveredPoint = (payload) => ({\n    type: SET_HOVERED_POINT,\n    payload,\n});\n\nexport const setUsState = (payload) => ({\n    type: SET_US_STATE,\n    payload,\n});\n\nexport const resetToDefaultView = () => ({\n    type: RESET_TO_DEFAULTS,\n});","import * as actions from \"./actions\";\nimport reducers from \"./reducers\";\nimport * as selectors from \"./selectors\";\nimport logics from \"./logic\";\n\nexport default {\n    actions,\n    logics,\n    reducers,\n    selectors,\n};","// import { createLogic } from \"redux-logic\"\n\n\nexport default [];","import { applyMiddleware, createStore, combineReducers } from 'redux';\nimport { createLogicMiddleware } from 'redux-logic';\nimport request from 'superagent';\n\nimport networks from './networks';\nimport selections from './selections';\n\n\nimport { firebaseUrl } from '../state/constants';\n\nconst reducers = {\n  networks: networks.reducers,\n  selections: selections.reducers,\n};\n\nconst logics = [\n  ...networks.logics,\n  ...selections.logics,\n];\n\nconst reduxLogicDependencies = {\n  firebaseUrl: firebaseUrl,\n  httpClient: request,\n};\n\nconst logicMiddleware = createLogicMiddleware(logics, reduxLogicDependencies);\n\nlet middleware = applyMiddleware(\n  logicMiddleware\n);\n\nif (process.env.NODE_ENV === `development` && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) {\n  middleware = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(middleware);\n}\n\nexport default () => {\n  const store = createStore(\n    combineReducers(reducers),\n    middleware\n  );\n\n  return store;\n};","export const LAYER_NAME = 'networks-dots';\nexport const accessToken = process.env.REACT_APP_MAPBOX_API_KEY;\nexport const mapboxStyle = process.env.REACT_APP_MAPBOX_STYLE_URL || \"mapbox://styles/townhallproject/ck87rw1kt1g821is46uvwm08k\";","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { isEqual } from 'lodash';\nimport {\n  LAYER_NAME, \n  accessToken,\n  mapboxStyle\n} from './constants';\n\nconst mapboxgl = window.mapboxgl;\n\nclass MapInset extends React.Component {\n  constructor(props) {\n    super(props);\n    this.addClickListener = this.addClickListener.bind(this);\n  }\n\n  componentDidMount() {\n    this.initializeMap();\n  }\n\n  setFilters() {\n    const {\n      selectedCategories\n    } = this.props;\n    let layer = this.map.getLayer(LAYER_NAME);\n    if (!layer) {\n      return;\n    }\n    let filterArray = ['any', ...selectedCategories.map((category) => ['==', ['get', 'category'], category])];\n    this.map.setFilter(LAYER_NAME, filterArray);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      selectedCategories,\n    } = this.props;\n\n    if (!isEqual(selectedCategories, prevProps.selectedCategories)) {\n      this.setFilters();\n    }\n  }\n\n  addClickListener() {\n    const {\n      bounds,\n      setBounds,\n    } = this.props;\n    const { map } = this;\n\n    map.on('click', () => {\n      setBounds(bounds, this.props.stateName);\n    });\n  }\n\n  initializeMap() {\n    const {\n      bounds,\n      mapId,\n    } = this.props;\n\n    mapboxgl.accessToken =\n        accessToken;\n\n    this.map = new mapboxgl.Map({\n      container: mapId,\n      doubleClickZoom: false,\n      dragPan: false,\n      scrollZoom: false,\n      style: mapboxStyle,\n    });\n\n    this.map.fitBounds(bounds, {\n      easeTo: { duration: 0 },\n      linear: true,\n    });\n    // map on 'load'\n    this.map.on('load', () => {\n      this.addClickListener();\n\n    });\n  }\n\n  render() {\n    const {\n      viewState,\n      mapId,\n    } = this.props;\n    const mapClassNames = classNames({\n      hidden: viewState === 'list',\n      inset: true,\n    });\n    return (\n      <React.Fragment>\n        <div id={mapId} className={mapClassNames} data-bounds={this.props.bounds} />\n      </React.Fragment>\n    );\n  }\n}\n\nMapInset.propTypes = {\n  bounds: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)).isRequired,\n  networks: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  mapId: PropTypes.string.isRequired,\n  stateName: PropTypes.string.isRequired,\n};\n\nMapInset.defaultProps = {\n  selectedState: '',\n};\n\nexport default MapInset;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  filter,\n  isEqual\n} from 'lodash';\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\n\nimport MapInset from './MapInset';\nimport './style.scss';\nimport './popover.scss';\nimport './popovertip.scss';\nimport './popover_implementation.scss';\nimport {\n  LAYER_NAME,\n  accessToken,\n  mapboxStyle\n} from './constants';\n\nconst mapboxgl = window.mapboxgl;\n\nclass MapView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.filterDistrict = ['any'];\n    this.includedStates = ['in', 'NAME'];\n\n    this.addPopups = this.addPopups.bind(this);\n    this.addClickListener = this.addClickListener.bind(this);\n    this.setFilters = this.setFilters.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n    this.insetOnClickEvent = this.insetOnClickEvent.bind(this);\n    this.handleClickOnInset = this.handleClickOnInset.bind(this);\n    this.initializeMap = this.initializeMap.bind(this);\n    this.state = {\n      popoverColor: 'popover-general-icon',\n      bbox: null,\n    };\n  }\n\n  componentDidMount() {\n    this.initializeMap();\n  }\n\n  componentDidUpdate(prevProps) {\n\n    const {\n      hoveredPointId,\n      viewState,\n      bbox,\n      selectedCategories\n    } = this.props;\n    this.map.resize();\n    // changed filters\n    if (!isEqual(selectedCategories, prevProps.selectedCategories)) {\n      this.setFilters();\n    }\n    // toggled view between full map and zoom\n    if (prevProps.viewState !== viewState) {\n      this.hoveredPopup.remove(); //close any open popup\n      if (viewState === 'default') {\n        this.setInitialState();\n      }\n    }\n    // if a bounding box has been set before render, fix the bounds and clear\n    // for changing map zoom and size\n\n    if ((this.state.bbox && viewState === 'list')) {\n      this.fitBounds(this.state.bbox);\n      this.setState({\n        bbox: null\n      })\n    }\n    if (bbox && viewState === 'list' && bbox !== prevProps.bbox) {\n      this.fitBounds(bbox);\n    }\n\n    if (hoveredPointId) {\n      this.hoverPoint(hoveredPointId)\n    }\n    if (prevProps.hoveredPointId && prevProps.hoveredPointId !== hoveredPointId) {\n      this.unHoverPoint(prevProps.hoveredPointId);\n    }\n  }\n\n  insetOnClickEvent(e) {\n    this.setState({\n      inset: false\n    });\n    const dataBounds = e.target.parentNode.parentNode.getAttribute('data-bounds').split(',');\n    const boundsOne = [Number(dataBounds[0]), Number(dataBounds[1])];\n    const boundsTwo = [Number(dataBounds[2]), Number(dataBounds[3])];\n    const bounds = boundsOne.concat(boundsTwo);\n    this.fitBounds(bounds);\n  }\n\n  fitBounds(bounds) {\n    this.map.fitBounds(bounds, {\n      padding: {\n        top: 10,\n        bottom: 25,\n        left: 15,\n        right: 5\n      },\n      maxZoom: 8\n    })\n  }\n\n  addPopups(layer) {\n    const {\n      map\n    } = this;\n\n    this.hoveredPopup = new mapboxgl.Popup({\n      closeButton: true,\n      closeOnClick: true,\n    });\n\n    map.on('mousemove', (e) => {\n      let layerCheck = this.map.getLayer(LAYER_NAME);\n      if (!layerCheck) {\n        return;\n      }\n      const features = map.queryRenderedFeatures(e.point, {\n        layers: [layer]\n      });\n      // Change the cursor style as a UI indicator.\n      map.getCanvas().style.cursor = (features.length) ? 'pointer' : '';\n\n      if (features.length) {\n        const feature = features[0];\n        const {\n          properties\n        } = feature;\n        const popoverClassName = `popover-${feature.properties.category.split(' ').join('-').toLowerCase()}`\n        this.setState({\n          popoverColor: popoverClassName\n        });\n        this.props.setHoveredPoint(feature.id);\n        let link;\n        if (properties.generalForm) {\n          link = `<a rel=\"noopener noreferrer\" target=\"_blank\" href=${properties.generalForm}>Link to form</a>`\n        } else if (properties.supportOfferForm && properties.supportRequestForm) {\n          link = `<a rel=\"noopener noreferrer\" class=\"side-by-side\" target=\"_blank\" href=${properties.supportOfferForm}>Offer support</a><a class=\"side-by-side\" target=\"_blank\" href=${properties.supportRequestForm}>Request support</a>`\n        } else if (properties.supportOfferForm) {\n          link = `<a rel=\"noopener noreferrer\" href=${properties.supportOfferForm}>Offer support</a>`;\n        } else if (properties.supportRequestForm) {\n          link = `<a rel=\"noopener noreferrer\" href=${properties.supportRequestForm}>Request support</a>`;\n        } else {\n          link = `<a rel=\"noopener noreferrer\" href=${properties.facebookPage}>Link to group</a>`;\n        }\n        let location = properties.city ? `${properties.city}, ${properties.state}` : properties.state;\n        return this.hoveredPopup.setLngLat(feature.geometry.coordinates)\n          .setHTML(`\n            <h4>${properties.title}</h4>\n            <div>${location}</div>\n            <div>${link}</div>`)\n\n          .addTo(map);\n      }\n      return undefined;\n    });\n\n  }\n\n  addClickListener() {\n\n    const {\n      map\n    } = this;\n    const {\n      setLatLng,\n    } = this.props;\n    const layer = map.getLayer(LAYER_NAME);\n    if (!layer) {\n      return;\n    }\n    map.on('click', (e) => {\n      const features = map.queryRenderedFeatures(\n        e.point, {\n        layers: [LAYER_NAME],\n      },\n      );\n\n      if (features.length > 0) {\n        setLatLng({\n          center: {\n            lat: features[0].properties.lat,\n            lng: features[0].properties.lng,\n          },\n          usState: features[0].properties.state\n        });\n      }\n    });\n  }\n\n  hoverPoint(hoveredPinId) {\n    let layer = this.map.getLayer(LAYER_NAME);\n    if (!layer) {\n      return;\n    }\n    this.map.setFeatureState({\n      source: \"composite\",\n      sourceLayer: \"manetworks\",\n      id: hoveredPinId\n    }, {\n      hover: true\n    });\n  };\n\n  unHoverPoint(hoveredPinId) {\n    let layer = this.map.getLayer(LAYER_NAME);\n    if (!layer) {\n      return;\n    }\n    this.map.setFeatureState({\n      source: \"composite\",\n      sourceLayer: \"manetworks\",\n      id: hoveredPinId\n    }, {\n      hover: false\n    });\n  };\n\n  handleReset() {\n    const {\n      resetToDefaultView,\n    } = this.props;\n\n    resetToDefaultView();\n  }\n\n  setInitialState() {\n    this.fitBounds([\n      [-128.8, 23.6],\n      [-65.4, 50.2]\n    ]);\n    document.getElementsByClassName('mapboxgl-ctrl-geocoder--input');\n    Array.from(document.getElementsByClassName('mapboxgl-ctrl-geocoder--input')).forEach(ele => {\n      ele.value = '';\n    })\n    this.map.resize();\n  }\n\n  handleClickOnInset(bounds, state) {\n    // this is for clicking on a state inset\n    this.setState({\n      bbox: bounds\n    })\n\n    this.props.setLatLng({\n      center: {},\n      usState: state\n    });\n  }\n\n  // Creates the button in our zoom controls to go to the national view\n  makeZoomToNationalButton() {\n    document.querySelector('.mapboxgl-ctrl-compass').remove();\n    if (document.querySelector('.mapboxgl-ctrl-usa')) {\n      document.querySelector('.mapboxgl-ctrl-usa').remove();\n    }\n    const usaButton = document.createElement('button');\n    usaButton.className = 'mapboxgl-ctrl-icon mapboxgl-ctrl-usa';\n    usaButton.innerHTML = '<span class=\"usa-icon\"></span>';\n\n    usaButton.addEventListener('click', this.handleReset);\n    document.querySelector('.mapboxgl-ctrl-group').appendChild(usaButton);\n  }\n\n  setFilters() {\n    const {\n      selectedCategories\n    } = this.props;\n    let layer = this.map.getLayer(LAYER_NAME);\n    if (!layer) {\n      return;\n    }\n    let filterArray = ['any', ...selectedCategories.map((category) => ['==', ['get', 'category'], category])];\n    this.map.setFilter(LAYER_NAME, filterArray);\n  }\n\n  initializeMap() {\n    const {\n      setLatLng,\n      resetToDefaultView\n    } = this.props;\n\n    mapboxgl.accessToken = accessToken;\n\n    this.map = new mapboxgl.Map({\n      container: 'map',\n      style: mapboxStyle,\n    });\n\n    // Set Mapbox map controls\n    this.map.addControl(new mapboxgl.NavigationControl());\n    this.map.scrollZoom.disable();\n    this.map.dragRotate.disable();\n    this.map.touchZoomRotate.disableRotation();\n    this.makeZoomToNationalButton();\n    const {\n      map\n    } = this;\n    this.map.addControl(\n      new MapboxGeocoder({\n        accessToken: mapboxgl.accessToken,\n        mapboxgl: mapboxgl,\n        countries: 'us',\n        marker: false,\n        zoom: 12,\n        flyTo: false,\n      })\n        .on('clear', function (result) {\n          resetToDefaultView();\n        })\n        .on('result', function (returned) {\n          map.resize();\n          let usState = ''\n          // searched a us state\n          if (returned.result.place_type[0] === 'region') {\n            console.log(returned.result)\n            let usState = returned.result.properties['short_code'].split('-')[1];\n            return setLatLng({\n              center: {},\n              usState,\n            });\n          }\n          setLatLng({\n            center: {\n              lat: returned.result.center[1],\n              lng: returned.result.center[0]\n            },\n            usState,\n          });\n\n        }),\n      'top-left'\n    );\n    // map on 'load'\n    this.fitBounds([\n      [-128.8, 23.6],\n      [-65.4, 50.2]\n    ]);\n    this.map.on('load', () => {\n      this.addClickListener();\n      this.map.setPaintProperty(LAYER_NAME, 'circle-opacity', [\n        'case',\n        ['boolean', ['feature-state', 'hover'], false],\n        1,\n        0.5\n      ]);\n\n      this.addPopups(LAYER_NAME);\n    });\n  }\n\n  render() {\n    const {\n      center,\n      resetSelections,\n      setLatLng,\n      viewState,\n      networks,\n      selectedCategories,\n    } = this.props;\n\n    return (<React.Fragment>\n      <div id=\"map\"\n        className={\n          this.state.popoverColor\n        } >\n        <div className=\"map-overlay\"\n          id=\"legend\" >\n          <MapInset networks={\n            filter(networks, {\n              state: 'AK'\n            })\n          }\n            center={\n              center\n            }\n            stateName=\"AK\"\n            viewState={\n              viewState\n            }\n            resetSelections={\n              resetSelections\n            }\n            selectedCategories={\n              selectedCategories\n            }\n            setLatLng={\n              setLatLng\n            }\n            setBounds={\n              this.handleClickOnInset\n            }\n            mapId=\"map-overlay-alaska\"\n            bounds={\n              [\n                [-170.15625, 51.72702815704774],\n                [-127.61718749999999, 71.85622888185527]\n              ]\n            }\n          /> <MapInset networks={\n            filter(networks, {\n              state: 'HI'\n            })\n          }\n            stateName=\"HI\"\n            center={\n              center\n            }\n            viewState={\n              viewState\n            }\n            resetSelections={\n              resetSelections\n            }\n            selectedCategories={\n              selectedCategories\n            }\n            setLatLng={\n              setLatLng\n            }\n            setBounds={\n              this.handleClickOnInset\n            }\n            mapId=\"map-overlay-hawaii\"\n            bounds={\n              [\n                [-161.03759765625, 18.542116654448996],\n                [-154.22607421875, 22.573438264572406]\n              ]\n            }\n          /> </div> </div>\n\n    </React.Fragment>\n    );\n  }\n}\n\nMapView.propTypes = {\n  networks: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  setLatLng: PropTypes.func.isRequired,\n};\n\nMapView.defaultProps = {\n\n};\n\nexport default MapView;","import React from 'react';\nimport { Button } from 'antd';\nimport './style.scss';\n\nconst SubmitNetwork = () => {\n  return (\n      <div className=\"start-network-container\">\n        <Button \n          id=\"start-network-button\" \n          target=\"_blank\" \n          href=\"https://docs.google.com/forms/d/e/1FAIpQLScuqQtCdKsDzvTzaA2PMyVHX7xcOqbOW7N7l_0YJASV4wMBVQ/viewform\">\n            Submit a Mutual Aid Network\n        </Button>\n      </div>\n  )\n};\n\nexport default SubmitNetwork;","import React from \"react\";\nimport { Checkbox } from 'antd';\nimport classNames from 'classnames';\nimport { options }  from '../../state/selections/reducers';\n\nimport './style.scss';\n\nconst CheckboxGroup = Checkbox.Group;\n\nclass Filters extends React.Component {\n    state = {\n        // checkedList: this.props.selectedCategories,\n        indeterminate: false,\n        checkAll: true,\n    };\n\n    onChange = checkedList => {\n        \n        this.props.setFilters(checkedList);\n        this.setState({\n            indeterminate: !!checkedList.length && checkedList.length < options.length,\n            checkAll: checkedList.length === options.length,\n        });\n    };\n\n    onCheckAllChange = e => {\n        const checkedList = e.target.checked ? options : [];\n        this.setState({\n            indeterminate: false,\n            checkAll: e.target.checked,\n        });\n        this.props.setFilters(checkedList);\n    };\n\n    render() {\n        if (!this.props.visible) {\n            return null;\n        }\n        return (\n            <div className={classNames(\"filter-container\", {'absolute-pos': this.props.absolute})}>\n                <div className=\"site-checkbox-all-wrapper\">\n                    <Checkbox\n                        indeterminate={this.state.indeterminate}\n                        onChange={this.onCheckAllChange}\n                        checked={this.state.checkAll}\n                    >\n                        Select all\n                    </Checkbox>\n                </div>\n                <br />\n                <CheckboxGroup\n                    value={this.props.selectedCategories}\n                    onChange={this.onChange}\n                >\n                    {options.map((ele) => <Checkbox key={ele.replace(' ', '-').toLowerCase()} className={ele.replace(' ', '-').toLowerCase()} value={ele}>{ele}</Checkbox>)}\n                </CheckboxGroup>\n            </div>\n        );\n    }\n}\n\nexport default Filters;","import React from 'react';\nimport {\n  Card,\n  Row\n} from 'antd';\nimport './style.scss';\n\n\nconst NetworkCard = (props) => {\n\n  const parseNetworks = (networks) => {\n    return networks.map(network => {\n      const {\n        address,\n        title,\n        neighborhood,\n        facebookPage,\n        category,\n        community,\n        language,\n        generalForm,\n        supportRequestForm,\n        supportOfferForm,\n        id\n      } = network;\n      return (\n        <Card\n          className='network-card'\n          title={title}\n          key={id}\n          onMouseEnter={\n            () => props.setHoveredPoint(id)\n          }\n          onMouseLeave={\n            () => props.setHoveredPoint(null)\n          }\n          extra={\n            <ul className='list-inline'>\n            {category && <li className={`text-${category.split(' ').join('-').toLowerCase()}`}>{category}</li>}\n            {community && <li>{community}</li>}\n          </ul>\n          }\n        >\n          <ul className='list-inline'>\n            {neighborhood && <li>{neighborhood}</li>}\n            {address && <li>{address}</li>}\n            {language && <li>{language}</li>}\n          </ul>\n          <Row justify=\"space-between\">\n            {generalForm && <a href={generalForm} target=\"_blank\" rel=\"noopener noreferrer\" className=\"button\">Offer or request help</a>}\n            {supportRequestForm && <a href={supportRequestForm} rel=\"noopener noreferrer\" target=\"_blank\" className=\"button\">Request help</a>}\n            {supportOfferForm && <a href={supportOfferForm} rel=\"noopener noreferrer\" target=\"_blank\" className=\"button\">Offer help</a>}\n            {facebookPage && <a href={facebookPage} rel=\"noopener noreferrer\" target=\"_blank\" className=\"button\">Join social media</a>}\n          </Row>\n        </Card>\n      )\n    })\n  }\n\n  return (\n    <>\n      {parseNetworks(props.networks)}\n    </>\n  )\n}\n\nexport default NetworkCard\n","import React from 'react';\nimport { Typography } from 'antd';\nimport { InfoCircleOutlined } from '@ant-design/icons';\nimport NetworkCard from '../NetworkCard'\nimport Filters from '../Filters';\nimport './style.scss';\n\nconst { Title } = Typography;\n\nconst NoNetworkSection = () => {\n  return (\n    <div className=\"no-network-section\">\n      <Title level={3}><InfoCircleOutlined /></Title>\n      <Title level={3}>There are no support requests or networks nearby.</Title> \n    </div>\n  )\n}\n\nconst ListView = ({\n    visibleCards,\n    setHoveredPoint,\n    setFilters,\n    selectedCategories\n  }) => {\n  return (\n      <div className=\"list-container\">\n        {\n          visibleCards.length ? \n          <>\n            <Filters \n                setFilters={setFilters}\n                absolute={false}\n                selectedCategories={selectedCategories}\n                visible={true}\n            />\n            <NetworkCard \n              setHoveredPoint={setHoveredPoint} \n              networks={visibleCards} /></> : <NoNetworkSection />\n              \n        }\n      </div>\n  )\n};\n\nexport default ListView;","import React from 'react';\n\nexport default () => (\n        <div class=\"webGl-warning\" target=\"_blank\">\n            {/* <img class=\"webGl-compimg\" src=\"../Images/map/ohno-computer.png\"></img> */}\n            <p>Our interactive map feature uses WebGL, a plugin common in most modern browsers. Your browser does not have WebGL working currently.</p>\n            <p>You can learn how to enable WebGL on\n                        <a rel=\"noopener noreferrer\" href=\"https://get.webgl.org/\" target=\"_blank\"> this website.</a>\n            </p>\n        </div>)\n","import React from 'react';\nimport {\n  connect\n} from 'react-redux';\nimport { Layout, Menu } from 'antd';\n\nimport networkStateBranch from '../state/networks';\nimport selectionStateBranch from '../state/selections';\nimport MapView from '../components/Map';\nimport SubmitNetwork from '../components/SubmitNetwork';\nimport Filters from '../components/Filters';\nimport ListView from '../components/ListView';\n\nimport './style.scss';\nimport NoWebGl from '../components/NoWebGl';\n\nconst { Header, Content, Footer } = Layout;\nconst mapboxgl = window.mapboxgl;\nclass DefaultLayout extends React.Component {\n  componentDidMount() {\n    const {\n      requestNetworks\n    } = this.props;\n    requestNetworks();\n  }\n  render() {\n    const {\n      setFilters,\n      selectedCategories,\n      filteredNetworks,\n      viewState,\n      setLatLng,\n      setUsState,\n      visibleCards,\n      allNetworks,\n      setHoveredPoint,\n      hoveredPointId,\n      masterBbox,\n      resetToDefaultView\n    } = this.props;\n    \n    if (!allNetworks.length) {\n      return null;\n    }\n    // viewState --> list or default\n    return (\n      <Layout className=\"layout\">\n        <Header>\n          <div className=\"logo\"></div>\n          <Menu\n            theme=\"dark\"\n            mode=\"horizontal\"\n            style={{ lineHeight: '64px' }}\n          >\n            {/* <Menu.Item key=\"1\">Guides and other resources</Menu.Item> */}\n          </Menu>\n        </Header>\n        <Content style={{ padding: '0 50px' }}>\n          <div className=\"main-container\">\n             {mapboxgl.supported() ? <>\n              <Filters \n                setFilters={setFilters}\n                selectedCategories={selectedCategories}\n                absolute={true}\n                visible={viewState ==='default'}\n              />\n              <div className={`interactive-content-${viewState}`}>\n              <MapView\n                  networks={filteredNetworks}\n                  viewState={viewState}\n                  setLatLng={setLatLng}\n                  selectedCategories={selectedCategories}\n                  resetToDefaultView={resetToDefaultView}\n                  hoveredPointId={hoveredPointId}\n                  setHoveredPoint={setHoveredPoint}\n                  bbox={masterBbox}\n                  setUsState={setUsState}\n                /> \n                <ListView \n                  visibleCards={visibleCards}\n                  setHoveredPoint={setHoveredPoint}\n                  setFilters={setFilters}\n                  selectedCategories={selectedCategories}\n                />\n                </div>\n              </>: <NoWebGl />}\n            \n            <div className=\"tagline\">Find Mutual Aid Networks and other community self-support projects near you. Reach out to these groups directly via the map above to get involved, offer resources, or submit needs requests.</div>\n            <SubmitNetwork />\n          </div>\n        </Content>\n        <Footer style={{ textAlign: 'center' }}>\n          <div className=\"footer-text\">\n            We list these networks as a public resource. We cannot verify or vouch for any network or individual offerings. Please exercise all necessary judgement when interacting with community members not previously known to you.\n          </div>\n        </Footer>\n      </Layout>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  filteredNetworks: networkStateBranch.selectors.getFilteredNetworks(state),\n  selectedCategories: selectionStateBranch.selectors.getSelectedCategories(state),\n  viewState: selectionStateBranch.selectors.getViewState(state),\n  searchLocation: selectionStateBranch.selectors.getSearchLocation(state),\n  visibleCards: networkStateBranch.selectors.getVisibleCards(state),\n  allNetworks: networkStateBranch.selectors.getAllNetworks(state),\n  hoveredPointId: selectionStateBranch.selectors.getHoveredPointId(state),\n  masterBbox: networkStateBranch.selectors.getBoundingBox(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  requestNetworks: () => dispatch(networkStateBranch.actions.requestNetworks()),\n  setFilters: (payload) => dispatch(selectionStateBranch.actions.setCategoryFilters(payload)),\n  setLatLng: (payload) => dispatch(selectionStateBranch.actions.setLatLng(payload)),\n  setHoveredPoint: (payload) => dispatch(selectionStateBranch.actions.setHoveredPoint(payload)),\n  setUsState: (payload) => dispatch(selectionStateBranch.actions.setUsState(payload)),\n  resetToDefaultView: () => dispatch(selectionStateBranch.actions.resetToDefaultView())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DefaultLayout);\n","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport 'iframe-resizer';\n\nimport configureStore from './state/store';\n// Containers\nimport DefaultLayout from './containers/DefaultLayout';\nimport './index.css';\n\n// Bootstrap the store\nvar Store = configureStore();\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={Store}>\n        <DefaultLayout />\n      </Provider>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}